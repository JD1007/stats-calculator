import statistics
import matplotlib.pyplot as plt
import numpy as np

# Sample data (you can replace this with your dataset)
data = [186.21, 163.60, 177.51, 199.63, 198.08, 122.04, 162.62, 276.67, 135.12, 112.30, 143.30, 136.97, 122.26, 210.76, 86.86, 139.74, 25.55, 150.36, 123.59, 137.39, 116.12, 246.74, 95.38, 131.66, 110.78, 285.77, 64.77, 103.49, 168.23, 47.81, 138.17, 119.49, 104.57, 181.96, 198.09, 46.32, 18.05, 85.51, 280.14, 128.85, 61.12, 112.02, 100.90, 144.53, 208.32, 54.68, 112.46, 261.30, 205.42, 120.69, ]

# User-defined probability and percentile values
user_probability = 90  # Replace with the desired probability (e.g., 0.7)
user_percentile = 50   # Replace with the desired percentile (e.g., 90)

# Sort the data in ascending order
data.sort()

# Print data in low to high order
print("Data in Low to High Order:")
print(data, "\n")

# Measures of Central Tendency
mean = np.mean(data)
median = np.median(data)
mode = statistics.multimode(data)

# Measures of Variation
data_range = np.ptp(data)
variance = np.var(data)
std_deviation = np.std(data)

# Quartiles and Percentiles
q1 = np.percentile(data, 25)
q2 = np.percentile(data, 50)
q3 = np.percentile(data, 75)
iqr = q3 - q1

# Midrange Calculation
midrange = (min(data) + max(data)) / 2

# Exploratory Data Analysis (Box Plot)
plt.boxplot(data)
plt.title("Box Plot")
plt.ylabel("Values")
plt.show()

# Function to calculate probability for a specific value
def calculate_probability(value):
    probability = len([x for x in data if x <= value]) / len(data)
    return probability

# Function to calculate any percentile
def calculate_percentile(percentile_value):
    percentile = np.percentile(data, percentile_value)
    return percentile

# Function to identify outliers using the IQR method
def find_outliers(data):
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    outliers = [x for x in data if x < lower_bound or x > upper_bound]
    return outliers

# Print results
print('\n'"Measures of Central Tendency:")
print(f"Mean: {mean}")
print(f"Median: {median}")
print(f"Mode: {mode}")
print(f"Midrange: {midrange}\n")

# Identify and print outliers
outliers = find_outliers(data)
if len(outliers) > 0:
    print("Outliers:", outliers)
else:
    print("No outliers found in the dataset.")

# Print measures of variation
print("\nMeasures of Variation:")
print(f"Range: {data_range}")
print(f"Variance: {variance}")
print(f"Standard Deviation: {std_deviation}\n")

print("Quartiles:")
print(f"Q1: {q1}")
print(f"Q2: {q2}")
print(f"Q3: {q3}")
print(f"IQR: {iqr}\n")

# Print user-defined probability and percentile results
print(f"Probability of a value less than or equal to {user_probability}: {calculate_probability(user_probability):.2f}")
print(f"{user_percentile}th Percentile: {calculate_percentile(user_percentile)}\n")

# User inputs for Raw Score (X), Population Mean (μ), and Standard Deviation (σ)
raw_score = float(input("Enter Raw Score (X): "))
population_mean = float(input("Enter Population Mean (μ): "))
standard_deviation = float(input("Enter Standard Deviation (σ): "))

# Calculate Z-score given Raw Score (X)
z_score = (raw_score - population_mean) / standard_deviation
# Print the calculated Z-score
print(f"The Z-score for Raw Score {raw_score} with Population Mean {population_mean} and Standard Deviation {standard_deviation} is: {z_score:.4f}")  
